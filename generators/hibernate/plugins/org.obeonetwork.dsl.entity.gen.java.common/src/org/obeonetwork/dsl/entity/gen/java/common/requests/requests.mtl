[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module requests('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0', 'http://www.obeonetwork.org/dsl/environment/2.0.0')/]

[import org::obeonetwork::dsl::entity::gen::java::common::services::entityObjectServices /]

[comment ** Defines if the 'generate.dto.per.entity' property is set to yes.
 * @param element the input element.
 * /]
[query public dtoPerEntity(element : EObject) : Boolean = 
getProperty('generate.dto.per.entity') = 'yes'
/]

[comment ** Defines if the given property is optional.
 * @param property the input property.
 * /]
[query public isOptional(property : Property) : Boolean = 
property.multiplicity = MultiplicityKind::ZERO_ONE or property.multiplicity = MultiplicityKind::ZERO_STAR
/]

[comment ** Defines if the given property is mandatory.
 * @param property the input property.
 * /]
[query public isMandatory(property : Property) : Boolean = 
not(property.isOptional())
/]

[comment ** Defines if the given property is multi valuated.
 * @param property the input property.
 * /]
[query public isMultiValuated(property : Property) : Boolean = 
property.multiplicity = MultiplicityKind::ONE_STAR or property.multiplicity = MultiplicityKind::ZERO_STAR
/]

[comment ** Defines if the given property is mono valuated.
 * @param property the input property.
 * /]
[query public isMonoValuated(property : Property) : Boolean = 
not(property.isMultiValuated())
/]

[comment ** Defines if the given reference is navigable.
 * @param reference the input reference.
 * /]
[query public isNavigable(reference : Reference) : Boolean = 
if not(reference.navigable.oclIsUndefined()) then reference.navigable
else false
endif
/]

[comment ** Defines if the given reference is bidirectional.
 * @param reference the input reference.
 * /]
[query public isBidirectional(reference : Reference) : Boolean = 
reference.isNavigable() and not(reference.oppositeOf.oclIsUndefined()) and reference.oppositeOf.isNavigable()
/]

[comment ** Defines if the given reference is unidirectional.
 * @param reference the input reference.
 * /]
[query public isUnidirectional(reference : Reference) : Boolean = 
not(reference.isBidirectional())
/]

[comment ** Defines if the given reference is unique.
 * @param reference the input reference.
 * /]
[query public isUnique(reference : Reference) : Boolean = 
	if reference.oppositeOf.oclIsUndefined() then false
	else reference.oppositeOf.isMonoValuated()
	endif 
/]

[comment ** Defines if the given reference is choosen as positive.
 * @param reference the input reference.
 * /]
[query public isChoosenAsPositive(reference : Reference) : Boolean = 
	if reference.oppositeOf.oclIsUndefined() or reference.isComposite then true
	else 
		if reference.isMonoValuated() and reference.oppositeOf.isMultiValuated() then true
		else
			if reference.oppositeOf.isMonoValuated() and reference.isMultiValuated() then false
			else reference.checkMandatoryAsymetry()
			endif
		endif
	endif 
/]

[comment ** Checks if the asymetry for a given mandatory reference is valid.
 * @param reference the input reference.
 * /]
[query public checkMandatoryAsymetry(reference : Reference) : Boolean = 
	if reference.isMandatory() and reference.oppositeOf.isOptional() then true
	else 
		if reference.oppositeOf.isMandatory() and reference.isOptional() then false
		else reference.checkNavigabilityAsymetry()
		endif
	endif 
/]

[comment ** Checks if the asymetry for a given navigable reference is valid.
 * @param reference the input reference.
 * /]
[query public checkNavigabilityAsymetry(reference : Reference) : Boolean = 
	if reference.isNavigable() and not(reference.oppositeOf.isNavigable()) then true
	else 
		if reference.oppositeOf.isNavigable() and not(reference.isNavigable()) then false
		else 
			if reference.getUuid() > reference.oppositeOf.getUuid() then true
			else false
			endif
		endif
	endif 
/]

[comment ** Defines if the given reference is negative.
 * @param reference the input reference.
 * /]
[query public isNegative(reference : Reference) : Boolean = 
not(reference.isChoosenAsPositive())
/]

[comment ** Defines if the given reference is positive.
 * @param reference the input reference.
 * /]
[query public isPositive(reference : Reference) : Boolean = 
reference.isChoosenAsPositive()
/]

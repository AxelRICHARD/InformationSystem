[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module daoInterfaceDirect('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0')/]

[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]
[import org::obeonetwork::dsl::entity::gen::java::common::services::criterionServices /]
[import org::obeonetwork::dsl::entity::gen::java::common::javaVersion /]
[import org::obeonetwork::dsl::entity::gen::java::common::common /]
[import org::obeonetwork::dsl::entity::gen::java::dao::common::daoCommon /]

[import org::obeonetwork::dsl::environment::gen::java::common::datatype /]
[import org::obeonetwork::dsl::environment::gen::java::common::common /]

[comment TODO: suffixe DTO ? /]

[comment ** Generates the full filepath for the entity.
 * @param entity the input entity.
 * /]
[template public fullFilePath(entity : Entity)]
[entity.pathToMainJava()/]/[entity.daoInterfacePackage().toPath()/]/[entity.daoInterfaceName()/].java
[/template]

[comment **
 * DAO interface generation
 * /]
[template public daoInterfaceDirect(entity : Entity)]
	[file (entity.fullFilePath(), false, 'UTF-8')]
package [entity.daoInterfacePackage()/];

// [protected ('for import')] 
import java.util.Collection;

[entity.importDaoException()/]
import [entity.entityQualifiedName()/];

// [/protected]

/**
 * This class provides the data access layer to the [entity.name/] entity class.<br/>
 * This is the interface which represent the contrat of the DAO access.
 */
public interface [entity.daoInterfaceName()/] {

	/**
	 * Create a new element.
	 * @param [entity.name.toStandardNotation().toLowerFirst()/] Element to create.[entity.throwCommentDaoException('If a Dao problem occurs.')/]
	 */
	public void create[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/])[entity.throwDaoException()/];

	/**
	 * Update an existing element.
	 * @param [entity.name.toStandardNotation().toLowerFirst()/] Element to update. 
     *            If the element has an id, it may use it.[throwCommentDaoException('If a Dao problem occurs.')/]
	 */
	public void update[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/])[entity.throwDaoException()/];

	/**
	 * Delete an element.
     * Only id can be used to find which element must be deleted.
	 * @param [entity.name.toStandardNotation().toLowerFirst()/] Element which will be delete. [entity.throwCommentDaoException('If a Dao problem occurs.')/]
	 */
	public void delete[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/])[entity.throwDaoException()/];

	/**
	 * Find all elements.
	 * @return A list with all elements, without any filter.[entity.throwCommentDaoException('If a Dao problem occurs.')/]
	 */
	public Collection[entity.toJavaVersion(entity.name.toStandardNotation().toUpperFirst())/] findAll[entity.name.toStandardNotation()/]s()[entity.throwDaoException()/];

	/**
	 * Find one entity by its primary key.
     * @param id The PK of the entity.
	 * @return The entity found.[entity.throwCommentDaoException('If a Dao problem occurs.')/]
	 */
	public [entity.name.toStandardNotation().toStandardNotation().toUpperFirst()/] find[entity.name.toStandardNotation()/]ById(String id)[entity.throwDaoException()/];

[comment Generate additional methods declaration /]
[for (it : Finder | entity.ownedFinders)]
	/**
	 * Find all entities by the attributes [it.criterions.criterionName()->sep(', ')/].
	[for (it2 : Criterion | it.criterions)]
	 * @param [it2.criterionName()/] 
	[/for]
	 * @return A collection with all matching entities.
	 */
	public Collection[it.toJavaVersion(it.entity.name)/] [it.name.toStandardNotation()/]([it.criterions.parameter()->sep(', ')/])[it.throwDaoException()/];
	
[/for]
	//[protected ('for technicals dao access api')]
	//[/protected]
}
	[/file]
[/template]

[comment ** Generates the parameter for the criterion.
 * @param criterion the input criterion.
 * /]
[template public parameter(criterion : Criterion) post (trim())]
[criterion.criterionType().toJavaType()/] [criterion.criterionName().toLowerFirst()/]
[/template]

[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module sqlCreate2('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0', 'http://www.obeonetwork.org/dsl/environment/2.0.0')/]

[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]
[import org::obeonetwork::dsl::environment::gen::java::common::common /]

[import org::obeonetwork::dsl::entity::gen::java::common::services::entityObjectServices /]
[import org::obeonetwork::dsl::entity::gen::java::dao::services::sqlTypeServices /]
[import org::obeonetwork::dsl::entity::gen::java::common::requests::requests /]

[import org::obeonetwork::dsl::environment::gen::sql::common::sqlCommon /]
[import org::obeonetwork::dsl::environment::gen::sql::common::sqltype /]
[import org::obeonetwork::dsl::entity::gen::java::common::common /]

[comment TODO: adapt to inheritance kind /]

[comment This template generates database ddl/]

[comment ** Generates the full filepath for the root.
 * @param root the input root.
 * /]
[template public fullFilePath(root : Root)]
[root.pathToMainResources()/]/[root.projectName()/]-ddl.sql
[/template]

[template public generateSqlCreate2(root : Root)]
	[file (root.fullFilePath(), false, 'UTF-8')]
-- [protected ('DB Name')]
-- TODO specify the name of database used
USE [root.projectName()/];
-- [/protected]

[for (it : Entity | root.eAllContents(Entity))]
-- Tables for Entity [it.name/] 

DROP TABLE IF EXISTS [it.name.toSqlNotation()/];
CREATE TABLE [it.name.toSqlNotation()/]
(
	[if (it.supertype.oclIsUndefined())]
	ID CHAR(32) NOT NULL,
	[/if]
	[comment Properties /]
	[for (att : Attribute | it.ownedAttributes->select(a : Attribute | not(a.type.oclIsUndefined())))]
		[comment Array of primitives types are not generated /]
		[if (att.isMonoValuated())]
	[att.name.toSqlNotation()/] [att.type.convertToSqlType()/] [if (att.isMandatory())]NOT NULL[/if],
		[/if]
	[/for]
	[comment Direct associations /]
	[for (ref : Reference | it.ownedReferences->select(r : Reference | r.isNavigable()))][comment for (references isNavigable or isOneToManyConstraint)/][comment n---n /]
		[if (ref.isUnidirectional())][comment |n|-->n /]
			[if (ref.isMonoValuated())][comment |n|-->1 /]
				[if (ref.isUnique())][comment |1|-->1 /]
[ref.oneToOneUni()/]
				[else][comment |*|-->1 /]
[ref.manyToOneUni()/]
				[/if]
			[else][comment n-->* /]
				[if (ref.isUnique())][comment |1|-->* /]
[comment the target will hold a foreign key to this entity generated by manyToOneBi /]
				[else][comment |*|-->* /]
[comment an intermediate table is required /]
				[/if]
			[/if]
		[else][comment |n|<-->n /]
			[if (ref.isMonoValuated())][comment |n|<-->1 /]
				[if (ref.isUnique())][comment |1|<-->1 /]
[ref.oneToOneBi()/]
				[else][comment |*|<-->1 /]
[ref.manyToOneBi()/]
				[/if]
			[else][comment |n|<-->* /]
				[if (ref.isUnique())][comment |1|<-->* /]
[comment the target will hold a foreign key to this entity  generated by manyToOneBi /]
				[else][comment |*|<-->* /]
[comment an intermediate table is required /]
				[/if]
			[/if]
		[/if]
	[/for]
	[comment hold the foreign keys to the others entity having a one to many reference toward this one /]
	[for (ref : Reference | it.ancestors()->last().eAllContents(Reference)->select(r : Reference | r.type = root and r.isMultiValuated() and r.isUnique()))]
		[if (ref.isUnidirectional())]
	-- |*|<--1
		[else]
	-- |*|<-->1
		[/if]
	FK_[ref.entity.name.toSqlNotation()/]_[ref.name.toSqlNotation()/]_ID CHAR(32)[if (ref.isMandatory())] NOT NULL[/if],
	[/for]
	[comment Inheritance /]
	[if (not(it.supertype.oclIsUndefined()))]
	FK_INHERITS_[it.supertype.name.toSqlNotation()/]_ID CHAR(32) NOT NULL,
	PRIMARY KEY (FK_INHERITS_[it.supertype.name.toSqlNotation()/]_ID)
	[else]
	PRIMARY KEY (ID)
	[/if]
);

	[comment Join table for many to many associations /]
	[for (ref : Reference | ownedReferences)][comment n---n /]
		[if (ref.isMultiValuated() and not(ref.isUnique()))][comment *---* /]
[ref.manyToMany()/][/if]
	[/for]
[/for]
	[/file]
[/template]

[comment ** Generates the foreignKey for the given reference.
 * @param reference the input reference.
 * /]
[template public genForeignKey(reference : Reference) post(trim())]
FK_[reference.type.name.toSqlNotation()/]_[reference.name.toSqlNotation()/]_ID CHAR(32)[if (reference.isMonoValuated())] UNIQUE[/if][if (reference.isMandatory())] NOT NULL[/if]
[/template]

[comment ** Generates the oneToOneUni part for the given reference.
 * @param reference the input reference.
 * /]
[template public oneToOneUni(reference : Reference)]
	-- |1|-->1
	[reference.genForeignKey()/],
[/template]

[comment ** Generates the manyToOneUni part for the given reference.
 * @param reference the input reference.
 * /]
[template public manyToOneUni(reference : Reference)]
	-- |*|-->1
	[reference.genForeignKey()/],
[/template]

[comment ** Generates the oneToOneBi part for the given reference.
 * @param reference the input reference.
 * /]
[template public oneToOneBi(reference : Reference)]
[if (reference.isPositive())]
	-- |1|<-->1
	[reference.genForeignKey()/],
[/if]
[/template]
	
[comment ** Generates the manyToOneBi part for the given reference.
 * @param reference the input reference.
 * /]
[template public manyToOneBi(reference : Reference)]
[if (reference.isPositive())]
[comment][if (reference.multiplicity =  MultiplicityKind::ONE_STAR)]
	-- |*|<--1
[else]
	-- |*|<-->1
[/if][/comment]
	-- |*|<-->1
	[reference.genForeignKey()/],
[/if]
[/template]
	
[comment ** Generates the manyToMany part for the given reference.
 * @param reference the input reference.
 * /]
[template public manyToMany(reference : Reference)]
[if (reference.isChoosenAsPositive())]
	[if (reference.isUnidirectional())]
-- |*|-->*
	[else]
-- |*|<-->*
	[/if]
DROP TABLE IF EXISTS [reference.joinTableName()/];
CREATE TABLE [reference.joinTableName()/]
(
	[reference.joinTableIdPart()/] CHAR(32) NOT NULL,
	[reference.joinTableIdRest()/] CHAR(32) NOT NULL,
	PRIMARY KEY ([reference.joinTableIdPart()/], [reference.joinTableIdRest()/])
);
[/if]
[/template]

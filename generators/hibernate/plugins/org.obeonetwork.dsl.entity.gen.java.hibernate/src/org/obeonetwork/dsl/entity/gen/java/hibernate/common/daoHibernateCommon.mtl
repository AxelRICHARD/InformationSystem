[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module daoHibernateCommon('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0')/]

[import org::obeonetwork::dsl::environment::gen::java::common::common/]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices/]

[import org::obeonetwork::dsl::entity::gen::java::common::common/]
[import org::obeonetwork::dsl::entity::gen::java::dao::services::sqlTypeServices/]
[import org::obeonetwork::dsl::entity::gen::java::common::structure/]
[import org::obeonetwork::dsl::entity::gen::java::hibernate::services::searchService/]

[comment ** Generates the hibernate package name for the given entity.
 * @param entity the input entity.
 * /]
[template public hibernatePackage(entity : Entity) post(trim())]
[if (getProperty('useDaoPackage') = 'no')]
    [entity.block.getCompleteName()/][entity.insertInPackage('dao.hibernate.package')/]
[else]
    [if (getProperty('use.functional.disposition') = 'true')]
    [entity.baseImports()/].[entity.projectName()/].[entity.block.normalizedName()/][entity.insertInPackage('dao.hibernate.package')/]
    [else]
    [entity.baseImports()/].[entity.projectName()/][entity.insertInPackage('dao.hibernate.package')/].[entity.block.normalizedName()/]
    [/if]
[/if]
[/template]

[comment ** Generates the hibernate package name for the given block.
 * @param block the input block.
 * /]
[template public hibernatePackage(block : Block) post(trim())]
[if (getProperty('useDaoPackage') = 'no')]
    [block.getCompleteName()/][block.insertInPackage('dao.hibernate.package')/]
[else]
    [if (getProperty('use.functional.disposition') = 'true')]
    [block.baseImports()/].[block.projectName()/].[block.normalizedName()/][block.insertInPackage('dao.hibernate.package')/]
    [else]
    [block.baseImports()/].[block.projectName()/][block.insertInPackage('dao.hibernate.package')/].[block.normalizedName()/]
    [/if]
[/if]
[/template]

[comment ** Generates the dao hibernate impl name for the given block.
 * @param block the input block.
 * /]
[template public daoHibernateImpl(block : Block)]
Hibernate[block.name.toStandardNotation().toUpperFirst()/]Dao
[/template]

[comment ** Generates the hibernate package name for the given entity.
 * @param entity the input entity.
 * /]
[template public daoHibernateImpl(entity : Entity)]
Hibernate[entity.name.toStandardNotation().toUpperFirst()/]Dao
[/template]

[comment ** Generates the import hibernate util for the given element.
 * @param element the input element.
 * /]
[template public importHibernateUtil(element : EObject)]
import [getProperty('hibernateUtil.package')/].[element.hibernateUtilName()/];
[/template]

[comment ** Generates the hibernate util name for the given element.
 * @param element the input element.
 * /]
[template public hibernateUtilName(element : EObject)]
[getProperty('hibernateUtil.name')/]
[/template]

[comment ** Generates the entity table name for the given entity.
 * @param entity the input entity.
 * /]
[template public entityTableName(entity : Entity)]
[entity.name.toSqlNotation()/][if (entity.entitySuffix(entity.ancestors()->last()->filter(EObject)->asSequence()->first()).size() > 0)]
_[entity.entitySuffix(entity.ancestors()->last()->filter(EObject)->asSequence()->first())/][/if]
[/template]

[comment ** Generates the attribute column name for the given attribute.
 * @param attribute the input attribute.
 * /]
[template public attributColumnName(attribute : Attribute)]
[attribute.name.toSqlNotation()/]
[/template]

[comment ** Generates the inheritance key column name for the given entity.
 * @param entity the input entity.
 * @param arg0 the parent entity.
 * /]
[template public entityInheritanceKeyColumnName(entity : Entity, arg0 : Entity)]
FK_INHERITS_[arg0.name.toSqlNotation()/]_ID
[/template]

[comment ** Generates the manyToOneUni reference key column name for the given reference.
 * @param reference the input reference.
 * /]
[template public manyToOneUniReferenceKeyColumnName(reference : Reference)]
FK_[reference.type.name.toSqlNotation()/]_[reference.name.toSqlNotation()/]_ID
[/template]

[comment ** Generates the oneToOneUni reference key column name for the given reference.
 * @param reference the input reference.
 * /]
[template public oneToOneUniReferenceKeyColumnName(reference : Reference)]
FK_[reference.type.name.toSqlNotation()/]_[reference.name.toSqlNotation()/]_ID
[/template]

[comment ** Generates the oneToManyUni reference key column name for the given reference.
 * @param reference the input reference.
 * /]
[template public oneToManyUniReferenceKeyColumnName(reference : Reference)]
FK_[reference.entity.name.toSqlNotation()/]_[reference.name.toSqlNotation()/]_ID
[/template]

[comment ** Generates the oneToOneBi reference key column name for the given reference.
 * @param reference the input reference.
 * /]
[template public oneToOneBiMainReferenceColumnName(reference : Reference)]
FK_[reference.type.name.toSqlNotation()/]_[reference.name.toSqlNotation()/]_ID
[/template]

[comment ** Generates the manyToOneBi reference key column name for the given reference.
 * @param reference the input reference.
 * /]
[template public manyToOneBiReferenceColumnName(reference : Reference)]
FK_[reference.type.name.toSqlNotation()/]_[reference.name.toSqlNotation()/]_ID
[/template]

[comment ** Generates the oneToManyBi reference key column name for the given reference.
 * @param reference the input reference.
 * /]
[template public oneToManyBiReferenceKeyColumnName(reference : Reference)]
FK_[reference.entity.name.toSqlNotation()/]_[reference.oppositeOf.name.toSqlNotation()/]_ID
[/template]

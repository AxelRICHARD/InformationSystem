[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module springHibernateDaoJUnit('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0') extends org::obeonetwork::dsl::entity::gen::java::hibernate::files::hibernate::junit::hibernateDaoJUnit/]

[import org::obeonetwork::dsl::entity::gen::java::hibernate::files::hibernate::junit::hibernateDaoJUnit/]
[import org::obeonetwork::dsl::entity::gen::java::dao::common::daoCommon/]
[import org::obeonetwork::dsl::entity::gen::java::hibernate::common::springCommon/]
[import org::obeonetwork::dsl::entity::gen::java::common::requests::requests /]
[import org::obeonetwork::dsl::entity::gen::java::common::common /]


[template public hibernateDAOJUnit(block : Block) overrides hibernateDAOJUnit ? (getProperty('generate.tests') = 'yes' and entities->size() > 0)]
[file (block.hibernateDAOJUnitFilePath(), false, 'UTF-8')]
[block.generate()/]
[/file]
[/template]

[template public hibernateDAOJUnitEntity(anEntity : Entity) overrides hibernateDAOJUnitEntity ? (getProperty('generate.tests') = 'yes' )]
[file (anEntity.hibernateDAOJUnitFilePath(), false, 'UTF-8')]
[anEntity.generate()/]
[/file]
[/template]

[template public generate(aBlock : Block) overrides generate]
package [aBlock.hibernateTestPackage()/];

// [protected ('for import ')]
[if (aBlock.scopedEntities().ownedAttributes->select(a : Attribute | a.type.name = 'Date')->size() > 0)]
import java.util.Date;
[/if]
[if (aBlock.scopedEntities().ownedAttributes->select(a : Attribute | a.isMultiValuated())->size() > 0)]
import java.util.ArrayList;
import java.util.List;
[/if]

[aBlock.importHibernateTransaction()/]
[aBlock.importBaseTestClass()/]
[aBlock.importDaoException()/]
[aBlock.importHibernateUtil()/]
[aBlock.importDAOFactory()/]
import junit.framework.Assert;

[for (importValue : String | aBlock.computeImports())]
import [importValue/];
[/for]

// [/protected]

/**
 * Test class for [aBlock.name/].
 */
public class [aBlock.testClassName()/] extends [aBlock.baseTestClass()/] {
	[aBlock.testFeatures()/]
	[aBlock.setUp()/]
	[aBlock.tearDown()/]
	[aBlock.generateTests()/]

	[aBlock.generateExamples()/]
    
    // [protected ('of specific tests')]
    // [/protected]

}
[/template]

[template public generate(anEntity : Entity) overrides generate]
package [anEntity.hibernateTestPackage()/];

// [protected ('for import ')]
[if (anEntity.scopedEntities()->including(anEntity).ownedAttributes->select(a : Attribute | a.type.name = 'Date')->size() > 0)]
import java.util.Date;
[/if]
[if (anEntity.scopedEntities()->including(anEntity).ownedAttributes->select(a : Attribute | a.isMultiValuated())->size() > 0)]
import java.util.ArrayList;
import java.util.List;
[/if]

[anEntity.importHibernateTransaction()/]
[anEntity.importBaseTestClass()/]
[anEntity.importDaoException()/]
[anEntity.importHibernateUtil()/]
[anEntity.importDAOFactory()/]
import junit.framework.Assert;

import [anEntity.daoInterfaceQualifiedName()/];
import [anEntity.entityQualifiedName()/];

[for (entity : Entity | anEntity.externalDAOs())]
import [entity.daoInterfaceQualifiedName()/];
import [entity.entityQualifiedName()/];
[/for]
// [/protected]

/**
 * Test class for [anEntity.name/].
 */
public class [anEntity.testClassName()/] extends [anEntity.baseTestClass()/] {
	[anEntity.testFeatures()/]
	[anEntity.setUp()/]
	[anEntity.tearDown()/]
	
	[anEntity.generateTests()/]

	[anEntity.generateExamples()/]
    
    // [protected ('of specific tests')]
    // [/protected]

}
[/template]

[comment ** Generates the base Test Class Package name for the given block.
 * @param block the input block.
 * /]
[comment override/]
[template public baseTestClassPackage(block : OclAny) overrides baseTestClassPackage]
org.springframework.test
[/template]

[comment ** Generates the base Test Class name for the given block.
 * @param block the input block.
 * /]
[comment override/]
[template public baseTestClass(block : OclAny) overrides baseTestClass]
AbstractTransactionalSpringContextTests
[/template]

[comment ** Generates the import Hibernate Transaction for the given block.
 * @param block the input block.
 * /]
[comment override/]
[template public importHibernateTransaction(block : OclAny) overrides importHibernateTransaction]
[''/]
[/template]


[comment ** Generates the testFeatures part for the given block.
 * @param block the input block.
 * /]
[comment override/]
[template public testFeatures(block : Block) overrides testFeatures]
protected final String['[]'/] getConfigLocations(){
    return new String['[]'/]{"[block.testApplicationContextRelativePath()/]"};
}
[for (it : Block | block->asSet()->union(block.externalDAOs()))]

private [it.daoInterfaceName()/] [it.DAOName()/] = ([it.daoInterfaceName()/])getApplicationContext().getBean("[it.DAOBeanID()/]");
[/for]
[/template]

[template public testFeatures(anEntity : Entity) overrides testFeatures]
protected final String['[]'/] getConfigLocations(){
    return new String['[]'/]{"[block.testApplicationContextRelativePath()/]"};
}

private [anEntity.daoInterfaceName()/] [anEntity.DAOName()/] = ([anEntity.daoInterfaceName()/])getApplicationContext().getBean("[anEntity.DAOBeanID()/]");
[for (entity : Entity | anEntity.externalDAOs())]
private [entity.daoInterfaceName()/] [entity.DAOName()/] = ([entity.daoInterfaceName()/])getApplicationContext().getBean("[entity.DAOBeanID()/]");
[/for]
[/template]

[comment ** Generates the setUp method for the given block.
 * @param block the input block.
 * /]
[comment override/]
[template public setUp(block : Block) overrides setUp]
[''/]
[/template]

[template public setUp(anEntity : Entity) overrides setUp]
[''/]
[/template]

[comment ** Generates the tearDown method for the given block.
 * @param block the input block.
 * /]
[comment override/]
[template public tearDown(block : OclAny) overrides tearDown]
[''/]
[/template]

[comment ** Generates the import Hibernate Util for the given block.
 * @param block the input block.
 * /]
[comment override/]
[template public importHibernateUtil(block : Block)]
[''/]
[/template]

[template public importHibernateUtil(anEntity : Entity)]
[''/]
[/template]

[comment ** Generates the import DAO Factory for the given block.
 * @param block the input block.
 * /]
[template public importDAOFactory(block : Block) overrides importDAOFactory]
[''/]
[/template]

[template public importDAOFactory(anEntity : Entity) overrides importDAOFactory]
[''/]
[/template]

[comment ** Generates the import Base Test Class name for the given element.
 * @param element the input element.
 * /]
[template public importBaseTestClass(element : OclAny) overrides importBaseTestClass]
import [element.baseTestClassQualifiedName()/]
[/template]

[template public baseTestClassQualifiedName(element : OclAny) overrides baseTestClassQualifiedName]
[element.baseTestClassPackage()/].[element.baseTestClass()/];
[/template]


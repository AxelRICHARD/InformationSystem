[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module daoHibernateDirectJUnit('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0')/]

[import org::obeonetwork::dsl::entity::gen::java::common::common/]
[import org::obeonetwork::dsl::entity::gen::java::common::requests::requests/]
[import org::obeonetwork::dsl::entity::gen::java::common::datatype/]
[import org::obeonetwork::dsl::entity::gen::java::common::structure/]
[import org::obeonetwork::dsl::entity::gen::java::hibernate::common::daoHibernateCommon/]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices/]
[import org::obeonetwork::dsl::environment::gen::java::common::common/]
[import org::obeonetwork::dsl::entity::gen::java::dao::common::daoCommon/]
[import org::obeonetwork::dsl::entity::gen::java::hibernate::common::springCommon/]

[comment ** Generates the full file path for the given entity.
 * @param entity the input entity.
 * /]
[template public fullFilePath(entity : Entity)]
[if (getProperty('generate.tests')='yes')]
[entity.pathToTestJava()/]/[entity.hibernateTestPackage().toPath()/]/[entity.name.toStandardNotation().toUpperFirst()/]Test.java  
[/if]
[/template]

[template public generate(entity : Entity)]
	[file (entity.fullFilePath(), false, 'UTF-8')]
package [entity.hibernateTestPackage()/];

// [protected ('for import')] 
[if (entity.ownedAttributes->select(a : Attribute | a.type.name = 'Date')->size() > 0)]
import java.util.Date;
[/if]
[if (entity.ownedAttributes->select(a : Attribute | a.isMultiValuated())->size() > 0)]
import java.util.ArrayList;
import java.util.List;
[/if]
[if (getProperty('linkage.strategy') = 'spring')]
import org.springframework.beans.factory.xml.XmlBeanFactory;
[comment import org.springframework.core.io.ClassPathResource;/]
import org.springframework.test.AbstractTransactionalSpringContextTests;
[else]
import org.hibernate.Transaction;
import junit.framework.TestCase;
import [entity.daoFactoryPackage()/].[entity.projectName().toUpperFirst()/]DaoFactory;
[/if]
import junit.framework.Assert;

[entity.importDaoException()/]
[if (not (getProperty('linkage.strategy') = 'spring'))]
[entity.importHibernateUtil()/]
[/if]
import [entity.daoInterfaceQualifiedName()/];
import [entity.entityQualifiedName()/];
[for (it : Reference | entity.ownedReferences->select(r : Reference | r.isNavigable()))][if (it.isMandatory())]
import [it.type.entityQualifiedName()/];
[/if][/for]

[for (it : Reference | entity.supertype.ownedReferences->select(r : Reference | r.isNavigable() and r.isMandatory()))]
import [it.type.entityQualifiedName()/];
	[for (it2 : Reference | it.type.ownedReferences->select(r : Reference | r.isNavigable() and r.isMandatory()))]
import [it2.type.entityQualifiedName()/];
	[/for]
[/for]

// [/protected]

/**
 * Test class for [entity.name/].
 */
public class [entity.name.toStandardNotation().toUpperFirst()/]Test extends [entity.TestSuperClass()/] {

    /**
     * The DAO for class [entity.name/].
     */
    private [entity.daoInterfaceName()/] dao;
    
[if (not (getProperty('linkage.strategy') = 'spring'))]
	/**
     * The transaction that will be used.
     */
    private Transaction tx;

    /**
     * Sets up the test before its execution, by creating the dao and the
     * transaction.
     * @throws Exception if an unexpected exception occurs.
     */
    @Override
    protected void setUp() throws Exception {
        super.setUp();
		dao = [entity.projectName().toUpperFirst()/]DaoFactory.get[entity.name.toStandardNotation().toUpperFirst()/]Dao();
		tx = HibernateUtil.currentSession().beginTransaction();
    }

    /**
     * Cleans up the test after its execution, by commiting the transaction in
     * order for the DB changes to become visible, and closing hibernate's
     * session.
     * @throws Exception if an unexpected exception occurs.
     */
    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }
[/if]

[if (getProperty('linkage.strategy') = 'spring')]
[entity.generateSpringConfAccessor()/]

[entity.generateDAOGetter()/]
[/if]

[entity.generateTests()/]

[entity.generateExamples()/]
    
    // [protected ('of specific tests')]
    // [/protected]

}
	[/file]
[/template]

[comment ** Generates examples part for the given entity.
 * @param entity the input entity.
 * /]
[template public generateExamples(entity : Entity)]
   /**
     * Creates an example of [entity.name/].
     * @return Returns a new instance of class [entity.name/], with fields filled
     * with example values.
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    protected [entity.name.toStandardNotation().toUpperFirst()/] get[entity.name.toStandardNotation().toUpperFirst()/]Example() throws DaoException {
        // fill attributes with example values
        [entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/] = new [entity.name.toStandardNotation().toUpperFirst()/]();
        [comment Member attributes /]
        [for (it : Attribute | entity.attributes)]
        	[if (it.isMonoValuated())]
        [entity.name.toStandardNotation().toLowerFirst()/].set[it.name.toStandardNotation().toUpperFirst()/]([it.exampleValues()/]);
        	[else]
        List<[it.type.name.toStandardNotation()/]> list[it.name.toUpperFirst()/] = new ArrayList<[it.type.name.toStandardNotation()/]>();
        list[it.name.toStandardNotation().toUpperFirst()/].add([it.exampleValues()/]);
        [it.entity.name.toStandardNotation().toLowerFirst()/].set[it.name.toUpperFirst()/](list[it.name.toStandardNotation().toUpperFirst()/]);
        	[/if]
        [/for]
        
        [entity.generatePopulateReference(0, 'get'+entity.name.toStandardNotation().toUpperFirst()+'Example')/]
        
        return [entity.name.toStandardNotation().toLowerFirst()/];
    }
    
    /**
     * Creates a second example of [entity.name/] with other values.
     * @return Returns a new instance of class [entity.name/] with fields filled
     * with other test values.
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    protected [entity.name.toStandardNotation().toUpperFirst()/] get[entity.name.toStandardNotation().toUpperFirst()/]Example2() throws DaoException {
        // fill attributes with example values
        [entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/] = new [entity.name.toStandardNotation().toUpperFirst()/]();
        [comment Member attributes /]
        [for (it : Attribute | entity.attributes)]
        	[if (it.isMonoValuated())]
        [it.entity.name.toStandardNotation().toLowerFirst()/].set[it.name.toStandardNotation().toUpperFirst()/]([it.exampleValues2()/]);
        	[else]
        List<[it.type.name.toStandardNotation()/]> list[it.name.toStandardNotation().toUpperFirst()/] = new ArrayList<[it.type.name.toStandardNotation()/]>();
        list[it.name.toStandardNotation().toUpperFirst()/].add([it.exampleValues2()/]);
        [it.entity.name.toStandardNotation().toLowerFirst()/].set[it.name.toStandardNotation().toUpperFirst()/](list[it.name.toStandardNotation().toUpperFirst()/]);
        	[/if]
        [/for]
        
        [entity.generatePopulateReference(1, 'get'+entity.name.toStandardNotation().toUpperFirst()+'Example2')/]
        
        return [entity.name.toStandardNotation().toLowerFirst()/];
    }
[/template]

[comment ** Generates populate reference part part for the given entity.
 * @param entity the input entity.
 * @arg0 number of the example
 * @arg1 name of the example
 * /]
[template public generatePopulateReference(entity : Entity, arg0 : Integer, arg1 : String)]
[for (it : Reference | entity.references->select(r : Reference | r.isNavigable() and r.isMandatory()))]
[it.generatePrincipalPopulateReference(it.entity.ownedReferences->size() * arg0 + i, arg1)/]
[/for]
[/template]

[comment ** Generates principal populate reference part part for the given reference.
 * @param reference the input reference.
 * @arg0 number of the example
 * @arg1 name of the example
 * /]
[template public generatePrincipalPopulateReference(reference : Reference, arg0 : Integer, arg1 : String)] 
// [protected ('in '+ arg1 +' for example '+ arg0 +' of '+ reference.type.name + '.' + reference.name + ' values')]
[reference.type.name.toStandardNotation()/] [reference.name.toLowerFirst()/]Example = new [reference.type.name.toStandardNotation()/]();
        [if (reference.isMonoValuated())]
[reference.oppositeOf.type.name.toStandardNotation().toLowerFirst()/].set[reference.name.toStandardNotation().toUpperFirst()/]([reference.name.toStandardNotation().toLowerFirst()/]Example);   
        [else]
[reference.type.name.toStandardNotation().toLowerFirst()/]Example.get[reference.name.toStandardNotation().toUpperFirst()/]().add([reference.name.toStandardNotation().toLowerFirst()/]Example);
        [/if]
        [if (reference.isBidirectional())] 
        [comment  for bidirectionnal relation /]
            [if (reference.isUnique())]
[reference.name.toStandardNotation().toLowerFirst()/]Example.set[reference.oppositeOf.name.toStandardNotation().toUpperFirst()/]([reference.entity.name.toStandardNotation().toLowerFirst()/]); 
[entity.name.toStandardNotation().toLowerFirst()/].set[reference.name.toStandardNotation().toUpperFirst()/]([reference.name.toStandardNotation().toLowerFirst()/]Example);
            [else]
[reference.name.toStandardNotation().toLowerFirst()/]Example.get[reference.oppositeOf.name.toStandardNotation().toUpperFirst()/]().add([entity.name.toStandardNotation().toLowerFirst()/]);        
            [/if]
        [/if]
[reference.type.daoFactoryCreate()/].create[reference.type.name.toStandardNotation()/]([reference.name.toStandardNotation().toLowerFirst()/]Example);
// [/protected]
[/template]

[comment ** Generates populate reference part part for the given reference.
 * @param reference the input reference.
 * @arg0 entity
 * @arg1 number of the example
 * @arg2 name of the example
 * /]
[template public generatePopulateReference(reference : Reference, arg0 : Entity, arg1 : Integer, arg2 : String)]
// [protected ('in ' + arg2 + ' for example ' + arg1 + ' of ' + reference.type.name + '.' + reference.name + 'values')]
[reference.type.name.toStandardNotation()/] [reference.type.name.toStandardNotation().toLowerFirst()/] = new [reference.type.name.toStandardNotation()/]();
[arg0.name.toStandardNotation().toLowerFirst()/].set[reference.name.toUpperFirst()/]([reference.type.name.toStandardNotation().toLowerFirst()/]);
// [/protected]
[comment  Pb de recursivite lorsqu'il y a des cycle dans le modele /]
[for (it : Reference | reference.type.ownedReferences)]
[it.generatePopulateReference2(it.type, arg1 * it.entity.ownedReferences->size() + i, arg2)/]
[/for]
[/template]

[comment ** Generates populate reference part part for the given reference.
 * @param reference the input reference.
 * @arg0 entity
 * @arg1 number of the example
 * @arg2 name of the example
 * /]
[template public generatePopulateReference2(reference : Reference, arg0 : Entity, arg1 : Integer, arg2 : String)]
[if (reference.isNavigable())]
    [if (reference.isMandatory())]    
// [protected ('in ' + arg2 + ' for example ' + arg1 + 'of ' + reference.type.name + '.' + reference.name + 'values')]
[reference.type.name.toStandardNotation()/] [reference.type.name.toStandardNotation().toLowerFirst()/] = new [reference.type.name.toStandardNotation()/]();
[arg0.name.toStandardNotation().toLowerFirst()/].set[reference.name.toUpperFirst()/]([reference.type.name.toStandardNotation().toLowerFirst()/]);
// [/protected]
    [/if]
[/if]
[/template]

[comment ** Generates tests part for the given entity.
 * @param entity the input entity.
 * /]
[template public generateTests(entity : Entity)]
    /**
     * Tests the creation of the entity [entity.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Search the entity and verify it exists</li></ul>
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    public final void testCreate[entity.name.toStandardNotation()/]() throws DaoException {
        // fill attributes with example values
        [entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/] = get[entity.name.toStandardNotation().toUpperFirst()/]Example();
        
        // Execute the tested code
        [entity.DAOAccess()/].create[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toLowerFirst()/]);

        // Verify result
        boolean found = false;
        for ([entity.name.toStandardNotation().toUpperFirst()/] current[entity.name.toStandardNotation()/] : [entity.DAOAccess()/].findAll[entity.name.toStandardNotation()/]s()) {
            if (current[entity.name.toStandardNotation()/].equals([entity.name.toStandardNotation().toLowerFirst()/])) {
                found = true;
            }
        }
        Assert.assertTrue("[entity.name/] not created", found);
    }

    /**
     * Test the modification of an entity [entity.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Modify the entity</li>
     * <li>Step 3 : Search the entity and verify the modified values</li></ul>
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    public final void testUpdate[entity.name.toStandardNotation()/]() throws DaoException {
        // Initialized the test
        [entity.name.toStandardNotation().toUpperFirst()/] [name.toStandardNotation().toLowerFirst()/] = get[name.toStandardNotation().toUpperFirst()/]Example();
        [entity.DAOAccess()/].create[name.toStandardNotation()/]([name.toStandardNotation().toLowerFirst()/]);

        // Execute the tested code
        [for (it : Attribute | entity.ownedAttributes)]
            [if (it.isMonoValuated())]
        [it.entity.name.toStandardNotation().toLowerFirst()/].set[it.name.toStandardNotation().toUpperFirst()/]([it.exampleValues2()/]);
            [/if]
        [/for]
        [entity.DAOAccess()/].update[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toLowerFirst()/]);

        // Verify result
        boolean found = false;
        for ([entity.name.toStandardNotation().toUpperFirst()/] current[entity.name.toStandardNotation()/] : [entity.DAOAccess()/].findAll[entity.name.toStandardNotation()/]s()) {
            if (current[entity.name.toStandardNotation()/].equals([entity.name.toStandardNotation().toLowerFirst()/])) {
                found = true;
                [for (ownedAttributes)]
                    [if (isMonoValuated())]
                Assert.assertEquals("Value [name.toStandardNotation().toLowerFirst()/] not modified",
                        [exampleValues2()/],
                        [entity.name.toStandardNotation().toLowerFirst()/].get[name.toStandardNotation().toUpperFirst()/]());
                    [/if]
                [/for]
            }
        }
        Assert.assertTrue("[entity.name.toStandardNotation()/] not found", found);
    }

    /**
     * Test the suppression of an entity [entity.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Delete the entity</li>
     * <li>Step 3 : Search the entity and verify it doesn't exist anymore</li>
     * </ul>
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    public final void testDelete[entity.name.toStandardNotation()/]() throws DaoException {
        // Initialized the test
        [entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/] = get[entity.name.toStandardNotation().toUpperFirst()/]Example();
        [entity.DAOAccess()/].create[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toLowerFirst()/]);
        
        // Execute the tested code
        [entity.DAOAccess()/].delete[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toLowerFirst()/]);
        
        // Verify result
        boolean found = false;
        for ([entity.name.toStandardNotation().toUpperFirst()/] current[entity.name.toStandardNotation()/] : [entity.DAOAccess()/].findAll[entity.name.toStandardNotation()/]s()) {
            if (current[entity.name.toStandardNotation()/].getId().equals([entity.name.toStandardNotation().toLowerFirst()/].getId())) {
                found = true;                
            }
        }
        Assert.assertFalse("[entity.name.toStandardNotation()/] not deleted", found);
    }

    /**
     * Test the search of all entities [entity.name/].<br/>
     * <ul><li>Step 1 : Create many entities</li>
     * <li>Step 2 : Search all entities and verify the entities created are
     * found</li></ul>
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    public final void testFindAll[entity.name.toStandardNotation()/]s() throws DaoException {
        // Verify number of element before testing
        int before = [entity.DAOAccess()/].findAll[entity.name.toStandardNotation()/]s().size();
        Assert.assertTrue("FindAll must return at least 0", before >= 0);
        
        // Add two elements
        [entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/]1 = get[entity.name.toStandardNotation().toUpperFirst()/]Example();
        [entity.DAOAccess()/].create[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toLowerFirst()/]1);
                
        [entity.name.toStandardNotation().toUpperFirst()/] [entity.name.toStandardNotation().toLowerFirst()/]2 = get[entity.name.toStandardNotation().toUpperFirst()/]Example();
        [entity.DAOAccess()/].create[entity.name.toStandardNotation()/]([entity.name.toStandardNotation().toLowerFirst()/]2);

        // Verify result
        int after = [entity.DAOAccess()/].findAll[entity.name.toStandardNotation().toStandardNotation()/]s().size();
        Assert.assertEquals(
                "FindAll don't find the good number of elements", 
                2,
                after - before);
    }
[/template]

[comment ** Generates the dao factory name for the given entity.
 * @param entity the input entity.
 * /]
[template public daoFactoryCreate(entity : Entity)]
[if (getProperty('linkage.strategy') = 'spring')]
[entity.DAOAccess()/][else]
SampleDaoFactory.get[entity.name.toStandardNotation()/]Dao()[/if]
[/template]

[comment ** Generates an example value for the given attribute.
 * @param attribute the input attribute.
 * /]
[template public exampleValues(attribute : Attribute) post(trim())]
[if (attribute.type.name = 'Integer')]
    new Integer([attribute.name.uniqueCode()/] + 1)
[elseif (attribute.type.name = 'Long')]
    new Long([name.uniqueCode()/] + 1)
[elseif (attribute.type.name = 'String' or attribute.type.name = 'Email')]
    "my[attribute.name.toUpperFirst()/]"
[elseif (attribute.type.name = 'Boolean')]
    new Boolean(false)
[elseif (attribute.type.name = 'Date')]
    new Date(0)
[elseif (attribute.type.name.equalsIgnoreCase('Double'))]
    new Double([attribute.name.uniqueCode()/].1)
[elseif (attribute.type.name.equalsIgnoreCase('Float'))]
    new Float([attribute.name.uniqueCode()/].1)
[else]
    new [attribute.type.name/]()
[/if]
[/template]

[comment ** Generates an example value for the given attribute.
 * @param attribute the input attribute.
 * /]
[template public exampleValues2(attribute : Attribute) post(trim())]
[if (attribute.type.name = 'Integer')]
    new Integer([attribute.name.uniqueCode()/])
[elseif (attribute.type.name = 'Long')]
    new Long([attribute.name.uniqueCode()/])
[elseif (attribute.type.name = 'String' or attribute.type.name = 'Email')]
    "second[attribute.name.toUpperFirst()/]"
[elseif (attribute.type.name = 'Boolean')]
    new Boolean(false)
[elseif (attribute.type.name = 'Date')]
    new Date(1)
[elseif (attribute.type.name.equalsIgnoreCase('Double'))]
    new Double([attribute.name.uniqueCode()/].0)
[elseif (attribute.type.name.equalsIgnoreCase('Float'))]
    new Float([attribute.name.uniqueCode()/].0)
[else]
    new [attribute.type.name/]()
[/if]
[/template]

[comment ** Generates the test superclass name for the given entity.
 * @param entity the input entity.
 * /]
[template public TestSuperClass(entity : Entity)]
[if (getProperty('linkage.strategy') = 'spring')]
AbstractTransactionalSpringContextTests[else]
TestCase[/if]
[/template]

[comment ** Generates the dao access name for the given entity.
 * @param entity the input entity.
 * /]
[template public DAOAccess(entity : Entity)]
[if (getProperty('linkage.strategy') = 'spring')]
[entity.DAOGetterName()/]()[else]
dao[/if]
[/template]

[comment ** Generates the dao getter name for the given block.
 * @param block the input block.
 * /]
[template public DAOGetterName(entity : Entity)]
getDao
[/template]

[comment ** Generates the dao getter for the given entity.
 * @param entity the input entity.
 * /]
[template public generateDAOGetter(entity : Entity)]
	private [entity.block.daoInterfaceName()/] [entity.DAOGetterName()/](){
    	return ([entity.block.daoInterfaceName()/])getApplicationContext().getBean("[entity.DAOBeanID()/]");
    }
[/template]

[comment ** Generates the spring conf accessor for the given entity.
 * @param entity the input entity.
 * /]
[template public generateSpringConfAccessor(entity : Entity)]
    protected final String['[]'/] getConfigLocations(){
    	return new String['[]'/]{"[entity.testApplicationContextRelativePath()/]"};
	}
[/template]

[comment ** Generates the hibernate test package name for the given entity.
 * @param entity the input entity.
 * /]
[template public hibernateTestPackage(entity : Entity)]
[entity.hibernatePackage()/].test
[/template]

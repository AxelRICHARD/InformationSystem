[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module daoHibernateDirectJUnitPackage('http://www.eclipse.org/emf/2002/Ecore', 'http://www.obeonetwork.org/dsl/entity/2.0.0')/]

[import org::obeonetwork::dsl::entity::gen::java::common::common/]
[import org::obeonetwork::dsl::entity::gen::java::common::requests::requests/]
[import org::obeonetwork::dsl::entity::gen::java::common::datatype/]
[import org::obeonetwork::dsl::entity::gen::java::common::structure/]
[import org::obeonetwork::dsl::entity::gen::java::hibernate::common::daoHibernateCommon/]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices/]
[import org::obeonetwork::dsl::environment::gen::java::common::common/]
[import org::obeonetwork::dsl::entity::gen::java::dao::common::daoCommon/]
[import org::obeonetwork::dsl::entity::gen::java::hibernate::files::hibernate::junit::daoHibernateDirectJUnit/]
[import org::obeonetwork::dsl::entity::gen::java::hibernate::common::springCommon/]

[comment ** Generates the full file path for the given block.
 * @param block the input block.
 * /]
[template public fullFilePath(block : Block)]
[block.pathToTestJava()/]/[block.hibernateTestPackage().toPath()/]/[block.name.toStandardNotation().toUpperFirst()/]Test.java  
[/template]

[template public generateDaoHibernateDirectJUnitPackage(block : Block) ? (getProperty('generate.tests') = 'yes' and entities->size() > 0)]
	[file (block.fullFilePath(), false, 'UTF-8')]
package [block.hibernateTestPackage()/];

// [protected ('for import')] 
[if (block.entities.ownedAttributes->select(a : Attribute | a.type.name = 'Date')->size() > 0)]
import java.util.Date;
[/if]
[if (block.entities.ownedAttributes->select(a : Attribute | a.isMultiValuated())->size() > 0)]
import java.util.ArrayList;
import java.util.List;
[/if]

[if (getProperty('linkage.strategy') = 'spring')]
import org.springframework.test.AbstractTransactionalSpringContextTests;
[else]
import org.hibernate.Transaction;
import junit.framework.TestCase;
[/if]
import junit.framework.Assert;


[block.importDaoException()/]
[if (not (getProperty('linkage.strategy') = 'spring'))]
[block.importHibernateUtil()/]
import [block.hibernatePackage()/].[block.daoHibernateImpl()/];
[/if]
import [block.daoInterfaceQualifiedName()/];
[for (it : Entity | block.entities)]
import [it.entityQualifiedName()/];
[for (it2 : Reference | it.ownedReferences->select(r : Reference | r.isNavigable()))][if (it2.isMandatory())]
import [it2.type.entityQualifiedName()/];
[/if][/for]
[/for]
// [/protected]

/**
 * Test class for [block.name/].
 */
public class [block.name.toStandardNotation().toUpperFirst()/]Test extends [block.TestSuperClass()/] {
[if (not (getProperty('linkage.strategy') = 'spring'))]

    /**
     * The DAO for class [block.name/].
     */
    private [block.daoInterfaceName()/] dao;
    
	/**
     * The transaction that will be used.
     */
    private Transaction tx;

    /**
     * Sets up the test before its execution, by creating the dao and the
     * transaction.
     * @throws Exception if an unexpected exception occurs.
     */
    @Override
    protected void setUp() throws Exception {
        super.setUp();
		dao = new [block.daoHibernateImpl()/]();
		tx = HibernateUtil.currentSession().beginTransaction();
    }

    /**
     * Cleans up the test after its execution, by commiting the transaction in
     * order for the DB changes to become visible, and closing hibernate's
     * session.
     * @throws Exception if an unexpected exception occurs.
     */
    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
		tx.commit();
        HibernateUtil.closeSession();
    }
[/if]
[if (getProperty('linkage.strategy') = 'spring')]

[block.generateSpringConfAccessor()/]

[block.generateDAOGetter()/]
[/if]

[block.entities.generateTests()/]

[block.entities.generateExamples()/]
    
    // [protected ('of specific tests')]
    // [/protected]

}
	[/file]
[/template]


[comment ** Generates the test superclass name for the given block.
 * @param block the input block.
 * /]
[template public TestSuperClass(block : Block) post(trim())]
[if (getProperty('linkage.strategy') = 'spring')]
AbstractTransactionalSpringContextTests
[else]
TestCase
[/if]
[/template]

[comment ** Generates the dao access name for the given block.
 * @param block the input block.
 * /]
[template public DAOAccess(block : Block)]
[if (getProperty('linkage.strategy') = 'spring')]
[block.DAOGetterName()/]()
[else]
dao
[/if]
[/template]

[comment ** Generates the dao getter name for the given block.
 * @param block the input block.
 * /]
[template public DAOGetterName(block : Block)]
getDao
[/template]

[comment ** Generates the spring conf accessor for the given block.
 * @param block the input block.
 * /]
[template public generateSpringConfAccessor(block : Block)]
    protected final String['[]'/] getConfigLocations(){
    	return new String['[]'/]{"[block.testApplicationContextRelativePath()/]"};
	}
[/template]

[comment ** Generates the dao getter for the given block.
 * @param block the input block.
 * /]
[template public generateDAOGetter(block : Block)]
	private [block.daoInterfaceName()/] [block.DAOGetterName()/](){
    	return ([block.daoInterfaceName()/])getApplicationContext().getBean("[block.DAOBeanID()/]");
    }
[/template]

[comment ** Generates the hibernate test package name for the given block.
 * @param block the input block.
 * /]
[template public hibernateTestPackage(block : Block)]
[block.hibernatePackage()/].test
[/template]

[comment ** Generates the dao factory name for the given entity.
 * @param entity the input entity.
 * /]
[template public daoFactoryCreate(entity : Entity)]
[if (getProperty('linkage.strategy') = 'spring')]
[entity.DAOAccess()/][else]
dao[/if]
[/template]
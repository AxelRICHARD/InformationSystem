[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module service-impl('http://www.obeonetwork.org/dsl/soa/2.0.0','http://www.obeonetwork.org/dsl/entity/2.0.0') extends org::obeonetwork::dsl::soa::gen::java::spring::files::java::service-impl/]

[import org::obeonetwork::dsl::soa::gen::java::spring::common::names /]
[import org::obeonetwork::dsl::environment::gen::java::common::common /]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]

[import org::obeonetwork::dsl::soa::gen::java::spring::files::java::service-impl /]

[import org::obeonetwork::dsl::entity::gen::java::dao::common::daoCommon /]

[import org::obeonetwork::dsl::soa::gen::java::spring::hibernate::requests::common /]
[import org::obeonetwork::dsl::soa::gen::java::spring::common::structure /]
[import org::obeonetwork::dsl::soa::gen::java::spring::requests::common /]

[comment ** Main generator for the service class
 * @param service the service to generate it service class
 * /]
[template public genServiceImpl(service : Service) overrides genServiceImpl ? (service.isProvidedService())]
[file (service.fullFilePath(), false, 'UTF-8')]
package [service.soaPackage()/];

//[protected('for import')]

import [service.baseImports() + '.fwk.service.exception.ServiceException'/];
import java.util.Collection;

//[/protected]

[for (importValue : String | service.computeImports())]
import [importValue/];
[/for]

[for (s : Service | service.eContainer(Component).requiredServices)]
import [s.serviceInterfaceQualifiedName()/];	
[/for]
[service.iocImport()/]

public class [service.serviceName()/]Impl [service.extensions()/] {
	[if (not service.ownedInterface.oclIsUndefined())]		
	[for (operation : Operation | service.ownedInterface.ownedOperations)]
    public [operation.generateReturn()/] [operation.name/]([operation.generateParameters()/]) throws ServiceException{
    	// [protected ('of ' + operation.name)]        
    	[operation.genDummyReturn()/]
    	// [/protected]        
    }
    
    [/for]
	[/if]
	[comment inject required services /]
	[for (s : Service | service.eContainer(Component).requiredServices)]
    private [s.serviceInterfaceName()/] [s.serviceName().toLowerFirst()/];
    public void set[s.serviceName().toUpperFirst()/]([s.serviceInterfaceName()/] [s.serviceName().toLowerFirst()/]){
	    this.[s.serviceName().toLowerFirst()/] = [s.serviceName().toLowerFirst()/];
    }			
	[/for]
	
    [service.iocInject()/]

}

[/file]
[/template]

[comment ** Generates the import statement for the given required service
 * @param service the input service.
 * /]
[template public iocImport(service : Service) overrides iocImport]
[for (entity : Entity | service.usedEntities())]
import [entity.daoInterfaceQualifiedName()/];	
[/for]	
[/template]

[comment ** Generates the getter and the setter for the given required service
 * @param service the input service.
 * /]
[template public iocInject(service : Service) overrides iocInject]
[for (entity : Entity | service.usedEntities())]
private [entity.daoInterfaceName()/] [entity.name.toLowerFirst()/]Dao;
public void set[entity.name.toUpperFirst()/]Dao([entity.daoInterfaceName()/] [entity.name.toLowerFirst()/]Dao){
	this.[entity.name.toLowerFirst()/]Dao = [entity.name.toLowerFirst()/]Dao;
}
	
[/for]
[/template]


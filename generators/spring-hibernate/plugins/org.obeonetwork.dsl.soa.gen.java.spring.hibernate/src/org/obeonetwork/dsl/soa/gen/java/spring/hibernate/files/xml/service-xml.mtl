[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module service-xml('http://www.obeonetwork.org/dsl/soa/2.0.0','http://www.obeonetwork.org/dsl/entity/2.0.0') extends org::obeonetwork::dsl::soa::gen::java::spring::files::xml::service-xml/]
[import org::obeonetwork::dsl::soa::gen::java::spring::common::names /]

[import org::obeonetwork::dsl::environment::gen::java::common::common /]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]

[import org::obeonetwork::dsl::soa::gen::java::spring::hibernate::requests::common /]

[template public genServiceXML(system : System) overrides genServiceXML]
[file (system.fullFilePath(), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:jee="http://www.springframework.org/schema/jee"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd">
[if (system.ownedComponents->size() > 0 and system.ownedComponents.providedServices->size() > 0)]
	[for (service : Service | system.ownedComponents.providedServices)]
		<bean id="[service.serviceName().toLowerFirst()/]" class="[service.serviceImplQualifiedName()/]">
		[if (service.eContainer().oclIsKindOf(Component) and service.eContainer(Component).requiredServices->size() > 0)]
        	[for (requiredService : Service | service.eContainer(Component).requiredServices)]
        	<property name="[requiredService.serviceName().toLowerFirst()/]" ref="[requiredService.serviceName().toLowerFirst()/]"/>	
        	[/for]
		[/if]	
			[service.iocInject()/]
            <!-- [protected ('of custom section-' + service.serviceName() + ' -->')]
            	
            <!-- [/protected] -->
        </bean>
	[/for]	
[/if]
</beans>

[/file]
[/template]


[comment ** Generates the bean injection statement
 * @param service the input service.
 * /]
[template public iocInject(service : Service) overrides iocInject]
[if (service.usedEntities()->size() > 0)]
[for (entity : Entity | service.usedEntities())]
<property name="[entity.name.toLowerFirst()/]Dao" ref="[entity.name/]DAO" />
[/for]
[/if]
[/template]

[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2012 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module testAction('http://www.obeonetwork.org/dsl/cinematic/3.0.0')/]

[import org::obeonetwork::dsl::environment::gen::java::common::common /]
[import org::obeonetwork::dsl::environment::gen::java::common::logger /]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]
[import org::obeonetwork::dsl::cinematic::gen::java::struts::architecture::common::names /]
[import org::obeonetwork::dsl::cinematic::gen::java::struts::architecture::common::widgets_mapping /]
[import org::obeonetwork::dsl::cinematic::gen::java::struts::architecture::services::cinematicServices /]

[comment ** Main generator for the htmlunit test action classes
 * @param viewState the viewState to generate it test action class
 * /]
[template public testAction(viewState : ViewState)]
[file (viewState.fullFilePath(), false, 'UTF-8')]
package [viewState.testActionPackage()/];

import java.net.URL;
import java.util.ResourceBundle;
import java.util.List;

import junit.framework.TestCase;

import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.*;

/**
 * HtmlUnit testing for <strong>[viewState.name/] Form</strong>
 * Scenario : [viewState.eContainer(Flow).name/]
 *
 */
public class [viewState.testActionClass()/] extends TestCase {

	/**
	 * initialize the TestCase.
	 * 
	 * @throws Exception if the test fails
	 */
	public void setUp() throws Exception {
		super.setUp();
		//[protected ('for setUp')]
		//[/protected]
	}

	/**
	 * terminate the TestCase.
	 * 
	 * @throws Exception if the test fails
	 */
	public void tearDown() throws Exception {
		super.tearDown();
		//[protected ('for tearDown')]
 		//[/protected]
	}

	/**
	 * Constructor
	 */
	public [viewState.testActionClass()/](String testName) {
		super(testName);
		//[protected ('for Constructor')]
 		//[/protected]
	}
[for (action : ActionState | viewState.getActionStates())]
	/**
	  * Regression test for "[action.name.toStandardNotation()/]" action of class [viewState.name.toStandardNotation()/]Action
	  * @param Nothing
	  * @return Nothing
	  * @throws Exception
	  */
	public void test[viewState.name.toStandardNotation()/][action.name.toStandardNotation()/]Action() throws Exception {
	    final WebClient webClient = new WebClient();
	    
	    ResourceBundle r = ResourceBundle.getBundle("tests");
	    final URL url = new URL(r.getString("fr.website.url") + "/pages/[viewState.eContainer(Flow).name.toLower()/]/[viewState.name.toLower()/]?event=init");
	    final HtmlPage page1 = (HtmlPage)webClient.getPage(url);
	    final HtmlForm form = page1.getFormByName("[viewState.name/]Form");
[for (element : AbstractViewElement | viewState.getViewElements())]
	[if (not (element.widget.name = 'Table') and not (element.widget.name = 'Combo') and not (element.widget.name = 'Label'))]
		final [element.widget.convertToHTMLUnitTypeFromStereotype()/] [element.javaName()/] = ([element.widget.convertToHTMLUnitTypeFromStereotype()/])form.get[element.widget.convertToHTMLUnitGetterTypeFromStereotype()/]ByName("[element.javaName()/]");
	[/if]
[/for]
	    final HtmlSubmitInput [action.name.toStandardNotation()/] = (HtmlSubmitInput)form.getInputByName("[action.name/]");
	    
	    assertEquals("[for (element : AbstractViewElement | viewState.getViewElements())][element.name/][/for]", page1.getTitleText());

		//[protected ('for ' + action.name + ' action')]
 	
	    //TODO : initialize form here
	    
	    //Subit the form and get the result page
	    final HtmlPage page2 = (HtmlPage)[action.name.toStandardNotation()/].click();

	    //TODO : validate resulting page
	    
		//[/protected]
	}
[/for]
	//[protected ('for other tests')]
	//[/protected]
}[/file]
	
[/template]

[comment ** Generates the file path for the htmlunit test action class.
 * @param viewState the input viewState.
 * /]
[template public fullFilePath(viewState : ViewState) post (trim())]	
[viewState.pathToTestJava()/]/[viewState.testActionPackage().toPath()/]/[viewState.testActionClass()/].java
[/template]


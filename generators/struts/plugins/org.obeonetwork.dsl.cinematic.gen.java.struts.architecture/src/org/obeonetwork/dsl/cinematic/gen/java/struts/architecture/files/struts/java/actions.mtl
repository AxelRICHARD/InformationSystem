[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2012 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module actions('http://www.obeonetwork.org/dsl/cinematic/3.0.0')/]

[import org::obeonetwork::dsl::environment::gen::java::common::common /]
[import org::obeonetwork::dsl::environment::gen::java::common::logger /]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]
[import org::obeonetwork::dsl::cinematic::gen::java::struts::architecture::common::names /]
[import org::obeonetwork::dsl::cinematic::gen::java::struts::architecture::services::cinematicServices /]

[comment ** Main generator for the struts action classes
 * @param viewState the viewState to generate it action class
 * /]
[template public actions(viewState : ViewState)]
[file (viewState.fullFilePath(), false, 'UTF-8')]
package [viewState.actionPackage()/];

// [protected ('for import')]
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

[viewState.loggerImport()/]
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import [viewState.formPackage()/].[viewState.getFormClassName()/];

[viewState.getActionStates().initImportAction()/]
[viewState.iocImport()/]

// [/protected] for import


/**
 * Implementation of <strong>[viewState.name.toUpperFirst()/] Action</strong>
 * Scenario : [viewState.eContainer(Flow).name.toUpperFirst()/]
 *
 */
public class [viewState.getActionClassName()/] extends org.apache.struts.actions.DispatchAction {
    /**
     * Commons Logging instance.
     */
     [viewState.loggerDeclaration(viewState.getActionClassName())/]

    /**
     * Forward codes.
     */
	public final static String PAGE_SELF = "self"; //$NON-NLS-1$
[for (nextViewState : ViewState | viewState.getNextViewStates())]
	public final static String PAGE_[nextViewState.name.replaceAll(' ', '_').toUpper()/] = "[nextViewState.name.replaceAll(' ','').toLowerFirst()/]"; //$NON-NLS-1$
	[/for]
//[protected ('user attributes')]
//[/protected]
    /**
     * Process the specified HTTP request for <strong>init</strong> event.
     * 
     * @param mapping The ActionMapping used to select this instance
     * @param form The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     * @return Forward setting with indirection forward name (see struts-config for real JSP name)
     *
     * @exception Exception if an input/output error or servlet exception occurs
     */
	public ActionForward init(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		LOG.debug("Starting init");
		String returnCode = PAGE_SELF;
		[viewState.getFormClassName()/] [viewState.getFormClassName().toLowerFirst()/] = ([viewState.getFormClassName()/])form;

		//[protected ('method init')]
		// TODO Write here the action code for init
		//[/protected] 

		LOG.debug("End init");	
		return mapping.findForward(returnCode);
	} 

    /**
     * Process if no event specified. Redirect to init.
     * 
     * @param mapping The ActionMapping used to select this instance
     * @param form The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     * @return Forward setting with indirection forward name (see struts-config for real JSP name)
     *
     * @exception Exception if an input/output error or servlet exception occurs
     */
	public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		LOG.debug("No event specified. Redirect to init.");
		return init(mapping, form, request, response);
	} 

[for (action : ActionState | viewState.getActionStates())]
    /**
     * Process the specified HTTP request for <strong>[action.name.toLowerFirst()/]</strong> event.
     * 
     * @param mapping The ActionMapping used to select this instance
     * @param form The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception Exception if an input/output error or servlet exception occurs
     */
	public ActionForward [action.actionName()/](ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		LOG.debug("Starting [action.name.toLowerFirst()/]");
		String returnCode = PAGE_SELF;
		[viewState.getFormClassName()/] [viewState.getFormClassName().toLowerFirst()/] = ([viewState.getFormClassName()/])form;
		
		//[protected ('method '+ action.name)]
		[action.initAction()/]	
		//[/protected]

		LOG.debug("End [action.name.toLowerFirst()/]");
		return mapping.findForward(returnCode);
	}
[/for]

[viewState.iocInject()/]

//[protected ('user methods')]
//[/protected]

}[/file]
	
[/template]

[comment ** Generates the file path for the struts action class.
 * @param viewState the input viewState.
 * /]
[template public fullFilePath(viewState : ViewState) post (trim())]	
[viewState.pathToMainJava()/]/[viewState.actionPackage().toPath()/]/[viewState.getActionClassName()/].java
[/template]

[comment ** Template to override to generate specific imports related with code injection.
 * @param viewState the input scree,
 * /]
[template public iocImport(viewState : ViewState)/]

[comment ** Template to override to generate code injection.
 * @param viewState the input viewState
 * /]
[template public iocInject(viewState : ViewState)/]

[comment ** Template to override to generate import for action body.
 * @param action the input action.
 * /]
[template public initImportAction(action : ActionState) /]

[comment ** Template to override to defines method body.
 * @param action the action to generate method body.
 * /]
[template public initAction(action : ActionState)]
// TODO Write here the action code for [action.name.toLowerFirst()/]	
[/template]


[comment encoding = UTF-8 /]
[comment **
 * Copyright (c) 2012 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * /]
[module validationXml('http://www.obeonetwork.org/dsl/cinematic/3.0.0')/]

[import org::obeonetwork::dsl::environment::gen::java::common::common /]
[import org::obeonetwork::dsl::environment::gen::java::common::logger /]
[import org::obeonetwork::dsl::environment::gen::java::common::services::stringservices /]
[import org::obeonetwork::dsl::cinematic::gen::java::struts::architecture::common::names /]
[import org::obeonetwork::dsl::cinematic::gen::java::struts::architecture::common::validator /]

[comment ** Main generator for the struts validation config.
 * @param viewState the input viewState 
 * /]
[template public validateXML(flow : Flow)]
[file (flow.fullFilePath(), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1.3//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_1_3.dtd">

<form-validation>
[if (flow.generateFileContent().trim() <> '')]
	<formset>
[flow.generateFileContent()/]
		<!-- [protected ('for formset part -->')]
		<!-- [/protected] for formset part -->
	</formset>
[/if]
<!-- [protected ('for bottom part -->')]
<!--  [/protected] for bottom part -->
</form-validation>
[/file]
	
[/template]

[comment ** Generates the file path for the struts action class.
 * @param viewState the input viewState.
 * /]
[template public fullFilePath(flow : Flow) post (trim())]	
[flow.pathToMainWebapp()/]/WEB-INF/conf/validation/validation-[flow.name.toStandardNotation()/].xml
[/template]

[comment ** Generates validators for all screens of the given scenario
 * @param scenario the input scenario
 * /]
[template public generateFileContent(flow : Flow)]
[for (viewState : ViewState | flow.states->filter(ViewState))]
[if (viewState.generateValidator().trim() <> '')]
		<form name="[viewState.name/]Form">
[viewState.generateValidator()/]
			<!-- [protected (viewState.name + 'Form -->')]
			<!-- [/protected] [viewState.name/]Form -->
		</form>
[/if]
[/for]
[/template]
